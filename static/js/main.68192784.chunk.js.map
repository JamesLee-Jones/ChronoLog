{"version":3,"sources":["Slider.js","App.js","reportWebVitals.js","index.js"],"names":["TimelineNavigaion","_ref","maxval","setCounter","react_default","a","createElement","Slider","aria-label","defaultValue","valueLabelDisplay","onChange","_","value","Math","round","step","sx","width","height","color","min","max","convertToGraph","data","nodes","links","names","matrix","i","length","push","id","String","name","j","k","source","target","App","_useState","useState","window","innerWidth","_useState2","Object","slicedToArray","displayWidth","setDisplayWidth","_useState3","innerHeight","_useState4","displayHeight","setDisplayHeight","addEventListener","_useState5","_useState6","setData","_useState7","_useState8","counter","getData","fetch","headers","Content-Type","Accept","then","response","json","myJson","res","toConsumableArray","map","useEffect","forceRef","useRef","current","d3Force","strength","x","zoomToFit","className","react_force_graph_module","graphData","nodeLabel","linkCurvature","linkWidth","linkDirectionalParticleWidth","ref","nodeAutoColorBy","src_Slider","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.68192784.chunk.js","sourcesContent":["import React from \"react\";\nimport { Slider } from \"@mui/material\";\n\nconst TimelineNavigaion = ({ maxval, setCounter }) => {\n  let scale = 100;\n\n  return (\n    <Slider\n      aria-label=\"Sections\"\n      defaultValue={1}\n      valueLabelDisplay=\"off\"\n      onChange={(_, value) => {\n        setCounter(Math.round(value / scale));\n      }}\n      step={1}\n      sx={{\n        width: 600,\n        height: 20,\n        color: \"#C6AC8F\",\n      }}\n      min={0}\n      max={maxval * scale}\n    />\n  );\n};\nexport default TimelineNavigaion;\n","import React, { useRef, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { ForceGraph2D } from \"react-force-graph\";\nimport TimelineNavigaion from \"./Slider\";\n\n// Converts JSON data from backend into graph JSON data for react force graph\nfunction convert(data) {\n  let result = [...data[\"Sections\"]];\n  return result.map(convertToGraph);\n}\n\nfunction convertToGraph(data) {\n  let nodes = [];\n  let links = [];\n  let names = data[\"names\"];\n  let matrix = data[\"matrix\"];\n  for (let i = 0; i < names.length; i++) {\n    nodes.push({ id: \"id\" + String(i), name: names[i] });\n  }\n  for (let j = 0; j < names.length; j++) {\n    for (let k = 0; k < names.length; k++) {\n      if (j !== k && matrix[j][k] !== 0) {\n        links.push({\n          source: \"id\" + String(j),\n          target: \"id\" + String(k),\n          value: matrix[j][k],\n        });\n      }\n    }\n  }\n  const graph = { nodes: nodes, links: links };\n  return graph;\n}\n\nfunction App() {\n  const [displayWidth, setDisplayWidth] = useState(window.innerWidth);\n  const [displayHeight, setDisplayHeight] = useState(window.innerHeight);\n\n  window.addEventListener(\"resize\", () => {\n    setDisplayWidth(window.innerWidth);\n    setDisplayHeight(window.innerHeight);\n  });\n\n  const [data, setData] = useState({ nodes: {}, links: {} });\n  const [counter, setCounter] = useState(0);\n\n  // Fetches data outputted by the backend\n\n  const getData = () => {\n    fetch(\"timeline.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    })\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (myJson) {\n        let res = convert(myJson);\n        setData(res);\n      });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  // Rendering Graph\n\n  const forceRef = useRef(null);\n  let repelStrength = -10;\n  let centering = -120;\n  let zoomingTime = 50;\n  let padding = 130;\n  let widthCentering = 300;\n  let heightCentering = 100;\n\n  useEffect(() => {\n    forceRef.current.d3Force(\"charge\").strength(repelStrength);\n    forceRef.current.d3Force(\"center\").x(centering);\n    forceRef.current.zoomToFit(zoomingTime, padding);\n  });\n\n  return (\n    <div className=\"App\">\n      <ForceGraph2D\n        graphData={data[counter]}\n        nodeLabel=\"name\"\n        linkCurvature=\"curvature\"\n        linkWidth=\"value\"\n        linkDirectionalParticleWidth={1}\n        width={displayWidth - widthCentering}\n        height={displayHeight - heightCentering}\n        ref={forceRef}\n        nodeAutoColorBy={\"name\"}\n      />\n\n      <TimelineNavigaion\n        maxval={data.length - 1}\n        setCounter={setCounter}\n        TimelineNavigaion\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}