{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["convert","data","Object","toConsumableArray","map","convertToGraph","nodes","links","names","matrix","i","length","push","id","String","name","j","k","source","target","value","App","mock_graph","basic","numberOfSections","chapterWise","Sections","_useState","useState","_useState2","slicedToArray","setData","_useState3","_useState4","counter","setCounter","useEffect","fetch","headers","Content-Type","Accept","then","response","json","myJson","res","forceRef","useRef","current","d3Force","strength","react_default","a","createElement","className","react_force_graph_module","graphData","nodeLabel","linkCurvature","linkWidth","linkDirectionalParticleWidth","ref","centerAt","Slider","aria-label","defaultValue","valueLabelDisplay","onChange","_","step","marks","min","max","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"+KAMA,SAASA,EAAQC,GAEf,OADUC,OAAAC,EAAA,EAAAD,CAAOD,EAAe,UAClBG,IAAIC,GAGpB,SAASA,EAAeJ,GAKtB,IAJA,IAAIK,EAAQ,GACRC,EAAQ,GACRC,EAAQP,EAAY,MACpBQ,EAASR,EAAa,OACjBS,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAChCJ,EAAMM,KAAK,CAAEC,GAAI,KAAOC,OAAOJ,GAAIK,KAAMP,EAAME,KAEjD,IAAK,IAAIM,EAAI,EAAGA,EAAIR,EAAMG,OAAQK,IAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIT,EAAMG,OAAQM,IAC5BD,IAAMC,GAAsB,IAAjBR,EAAOO,GAAGC,IACvBV,EAAMK,KAAK,CACTM,OAAQ,KAAOJ,OAAOE,GACtBG,OAAQ,KAAOL,OAAOG,GACtBG,MAAOX,EAAOO,GAAGC,KAMzB,MADc,CAAEX,MAAOA,EAAOC,MAAOA,GAsFxBc,MAlFf,WAEE,IAgBIC,EAAatB,EAhBD,CACduB,MAAO,QACPC,iBAAkB,GAClBC,aAAa,EACbC,SAAU,CACR,CACElB,MAAO,CAAC,MAAO,MAAO,KACtBC,OAAQ,CACN,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,QAMqBkB,EAEZC,mBAASN,GAAWO,EAAA3B,OAAA4B,EAAA,EAAA5B,CAAAyB,EAAA,GAArC1B,EAAI4B,EAAA,GAAEE,EAAOF,EAAA,GAAAG,EACUJ,mBAAS,GAAEK,EAAA/B,OAAA4B,EAAA,EAAA5B,CAAA8B,EAAA,GAAlCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAoB1BG,oBAAU,WAfRC,MAAM,gBAAiB,CACrBC,QAAS,CACPC,eAAgB,mBAChBC,OAAQ,sBAGTC,KAAK,SAAUC,GACd,OAAOA,EAASC,SAEjBF,KAAK,SAAUG,GACd,IAAIC,EAAM7C,EAAQ4C,GAClBb,EAAQc,MAMX,IAIH,IAAMC,EAAWC,iBAAO,MAOxB,OAJAX,oBAAU,WACRU,EAASE,QAAQC,QAAQ,UAAUC,UAHjB,OAOlBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAA,EAAY,CACXC,UAAWvD,EAAKiC,GAChBuB,UAAU,OACVC,cAAc,YACdC,UAAU,QACVC,6BAA8B,EAC9BC,IAAKf,EACLgB,SAAkB,CAAC,OAGrBX,EAAAC,EAAAC,cAACU,EAAA,EAAM,CACLC,aAAW,WACXC,aAAc,EACdC,kBAAkB,OAClBC,SAAU,SAACC,EAAGhD,GACZe,EAAWf,IAEbiD,KAAM,EACNC,OAAK,EACLC,IAAK,EACLC,IAAKvE,EAAKU,OAAS,MClGZ8D,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAApC,KAAAmC,EAAAE,KAAA,WAAqBrC,KAAK,SAAAsC,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCFDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHtC,EAAAC,EAAAC,cAACF,EAAAC,EAAMsC,WAAU,KACfvC,EAAAC,EAAAC,cAACsC,EAAG,QAORlB","file":"static/js/main.b73fc1ff.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport { ForceGraph2D } from \"react-force-graph\";\nimport { Slider } from \"@mui/material\";\n\n// Converts JSON data from backend into graph JSON data for react force graph\nfunction convert(data) {\n  let result = [...data[\"Sections\"]];\n  return result.map(convertToGraph);\n}\n\nfunction convertToGraph(data) {\n  let nodes = [];\n  let links = [];\n  let names = data[\"names\"];\n  let matrix = data[\"matrix\"];\n  for (let i = 0; i < names.length; i++) {\n    nodes.push({ id: \"id\" + String(i), name: names[i] });\n  }\n  for (let j = 0; j < names.length; j++) {\n    for (let k = 0; k < names.length; k++) {\n      if (j !== k && matrix[j][k] !== 0) {\n        links.push({\n          source: \"id\" + String(j),\n          target: \"id\" + String(k),\n          value: matrix[j][k],\n        });\n      }\n    }\n  }\n  const graph = { nodes: nodes, links: links };\n  return graph;\n}\n\nfunction App() {\n  // Mock data needed to allow the convert graph function to run on first pass\n  let mock_data = {\n    basic: \"Mock \",\n    numberOfSections: 10,\n    chapterWise: true,\n    Sections: [\n      {\n        names: [\"Bob\", \"Sam\", \"C\"],\n        matrix: [\n          [0, 1, 1],\n          [1, 0, 1],\n          [1, 1, 0],\n        ],\n      },\n    ],\n  };\n\n  let mock_graph = convert(mock_data);\n\n  const [data, setData] = useState(mock_graph);\n  const [counter, setCounter] = useState(0);\n\n  // Fetches data outputted by the backend\n\n  const getData = () => {\n    fetch(\"timeline.json\", {\n      headers: {\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      },\n    })\n      .then(function (response) {\n        return response.json();\n      })\n      .then(function (myJson) {\n        let res = convert(myJson);\n        setData(res);\n      });\n  };\n\n  useEffect(() => {\n    getData();\n  }, []);\n\n  // Rendering Graph\n\n  const forceRef = useRef(null);\n  let repelStrength = -400;\n\n  useEffect(() => {\n    forceRef.current.d3Force(\"charge\").strength(repelStrength);\n  });\n\n  return (\n    <div className=\"App\">\n      <ForceGraph2D\n        graphData={data[counter]}\n        nodeLabel=\"name\"\n        linkCurvature=\"curvature\"\n        linkWidth=\"value\"\n        linkDirectionalParticleWidth={1}\n        ref={forceRef}\n        centerAt={([500], [500])}\n      />\n\n      <Slider\n        aria-label=\"Sections\"\n        defaultValue={0}\n        valueLabelDisplay=\"auto\"\n        onChange={(_, value) => {\n          setCounter(value);\n        }}\n        step={1}\n        marks\n        min={0}\n        max={data.length - 1}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}