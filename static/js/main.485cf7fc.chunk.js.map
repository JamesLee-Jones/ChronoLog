{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["convert","data","Object","toConsumableArray","map","convertToGraph","nodes","links","names","matrix","i","length","push","id","String","name","j","k","source","target","value","App","mock_graph","basic","numberOfSections","chapterWise","Sections","_useState","useState","_useState2","slicedToArray","setData","_useState3","_useState4","counter","setCounter","useEffect","fetch","headers","Content-Type","Accept","then","response","json","myJson","res","forceRef","useRef","current","d3Force","strength","react_default","a","createElement","className","react_force_graph_module","graphData","nodeLabel","linkCurvature","linkWidth","linkDirectionalParticleWidth","ref","centerAt","Slider","aria-label","defaultValue","valueLabelDisplay","onChange","_","step","marks","min","max","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"+KAMA,SAASA,EAAQC,GAEf,OADUC,OAAAC,EAAA,EAAAD,CAAOD,EAAe,UAClBG,IAAIC,GAIpB,SAASA,EAAeJ,GAKtB,IAJA,IAAIK,EAAQ,GACRC,EAAQ,GACRC,EAAQP,EAAY,MACpBQ,EAASR,EAAa,OACjBS,EAAI,EAAGA,EAAIF,EAAMG,OAAQD,IAChCJ,EAAMM,KAAK,CAAEC,GAAI,KAAOC,OAAOJ,GAAIK,KAAMP,EAAME,KAEjD,IAAK,IAAIM,EAAI,EAAGA,EAAIR,EAAMG,OAAQK,IAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIT,EAAMG,OAAQM,IAC5BD,IAAMC,GAAsB,IAAjBR,EAAOO,GAAGC,IACvBV,EAAMK,KAAK,CAAEM,OAAQ,KAAOJ,OAAOE,GAAIG,OAAQ,KAAOL,OAAOG,GAAIG,MAAOX,EAAOO,GAAGC,KAKxF,MADc,CAAEX,MAAOA,EAAOC,MAAOA,GAuFxBc,MAlFf,WAGE,IAYIC,EAAatB,EAZD,CACduB,MAAQ,QACRC,iBAAmB,GACnBC,aAAe,EACfC,SAAW,CACP,CAAClB,MAAQ,CAAC,MAAO,MAAO,KAC5BC,OAAU,CAAC,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,QAIekB,EAEXC,mBAASN,GAAWO,EAAA3B,OAAA4B,EAAA,EAAA5B,CAAAyB,EAAA,GAArC1B,EAAI4B,EAAA,GAAEE,EAAOF,EAAA,GAAAG,EACUJ,mBAAS,GAAEK,EAAA/B,OAAA4B,EAAA,EAAA5B,CAAA8B,EAAA,GAAlCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAwB1BG,oBAAU,WAlBRC,MAAM,gBACL,CACCC,QAAU,CACRC,eAAgB,mBAChBC,OAAU,sBAIbC,KAAK,SAAUC,GACd,OAAOA,EAASC,SAGjBF,KAAK,SAAUG,GACd,IAAIC,EAAM7C,EAAQ4C,GAClBb,EAAQc,MAMV,IAKF,IAAMC,EAAWC,iBAAO,MAMxB,OAHAX,oBAAU,WACRU,EAASE,QAAQC,QAAQ,UAAUC,UAHjB,OAMlBC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZH,EAAAC,EAAAC,cAACE,EAAA,EAAY,CACVC,UAAWvD,EAAKiC,GAChBuB,UAAU,OACVC,cAAc,YACdC,UAAU,QACVC,6BAA8B,EAC9BC,IAAKf,EACLgB,SAAiB,CAAC,OAGpBX,EAAAC,EAAAC,cAACU,EAAA,EAAM,CACLC,aAAW,WACXC,aAAc,EACdC,kBAAkB,OAClBC,SAAU,SAACC,EAAGhD,GAAWe,EAAWf,IACpCiD,KAAM,EACNC,OAAK,EACLC,IAAK,EACLC,IAAKvE,EAAKU,OAAS,MC/Fd8D,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxCC,EAAAC,EAAA,GAAApC,KAAAmC,EAAAE,KAAA,WAAqBrC,KAAK,SAAAsC,GAAiD,IAA9CC,EAAMD,EAANC,OAAQC,EAAMF,EAANE,OAAQC,EAAMH,EAANG,OAAQC,EAAMJ,EAANI,OAAQC,EAAOL,EAAPK,QAC3DJ,EAAON,GACPO,EAAOP,GACPQ,EAAOR,GACPS,EAAOT,GACPU,EAAQV,MCFDW,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACHtC,EAAAC,EAAAC,cAACF,EAAAC,EAAMsC,WAAU,KACfvC,EAAAC,EAAAC,cAACsC,EAAG,QAORlB","file":"static/js/main.485cf7fc.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react'\r\nimport './App.css';\r\nimport { ForceGraph2D } from 'react-force-graph';\r\nimport { Slider } from '@mui/material';\r\n\r\n// Converts JSON data from backend into graph JSON data for react force graph\r\nfunction convert(data) {\r\n  let result = [...data[\"Sections\"]]\r\n  return result.map(convertToGraph)\r\n\r\n}\r\n\r\nfunction convertToGraph(data){\r\n  let nodes = []\r\n  let links = []\r\n  let names = data[\"names\"]\r\n  let matrix = data[\"matrix\"]\r\n  for (let i = 0; i < names.length; i++) {\r\n    nodes.push({ id: \"id\" + String(i), name: names[i] })\r\n  }\r\n  for (let j = 0; j < names.length; j++) {\r\n    for (let k = 0; k < names.length; k++) {\r\n      if (j !== k && matrix[j][k] !== 0) {\r\n        links.push({ source: \"id\" + String(j), target: \"id\" + String(k), value: matrix[j][k] })\r\n      }\r\n    }\r\n  }\r\n  const graph = { nodes: nodes, links: links }\r\n  return graph\r\n  \r\n}\r\n\r\nfunction App() {\r\n  \r\n  // Mock data needed to allow the convert graph function to run on first pass \r\n  let mock_data = {\r\n    \"basic\":\"Mock \",\r\n    \"numberOfSections\":10,\r\n    \"chapterWise\": true,\r\n    \"Sections\":[\r\n        {\"names\":[\"Bob\", \"Sam\", \"C\"], \r\n    \"matrix\": [[0, 1, 1], \r\n               [1, 0, 1], \r\n               [1, 1, 0]]}\r\n            ]\r\n    }\r\n\r\n  let mock_graph = convert(mock_data)\r\n  \r\n  const [data, setData] = useState(mock_graph)\r\n  const [counter, setCounter] = useState(0)\r\n\r\n  // Fetches data outputted by the backend \r\n\r\n  const getData=()=>{\r\n\r\n    fetch('timeline.json'\r\n    ,{\r\n      headers : { \r\n        'Content-Type': 'application/json',\r\n        'Accept': 'application/json'\r\n       }\r\n    }\r\n    )\r\n    .then(function (response) {\r\n      return response.json();\r\n\r\n    })\r\n    .then(function (myJson) {\r\n      let res = convert(myJson)\r\n      setData(res)\r\n      });\r\n  }\r\n\r\n  useEffect(()=>{\r\n    getData()\r\n  },[])\r\n\r\n\r\n  // Rendering Graph \r\n\r\n  const forceRef = useRef(null);\r\n  let repelStrength = -400;\r\n\r\n  useEffect(() => {\r\n    forceRef.current.d3Force(\"charge\").strength(repelStrength);  });\r\n\r\n  return (\r\n    <div className=\"App\">\r\n       <ForceGraph2D\r\n          graphData={data[counter]}\r\n          nodeLabel=\"name\"\r\n          linkCurvature=\"curvature\"\r\n          linkWidth=\"value\"\r\n          linkDirectionalParticleWidth={1}\r\n          ref={forceRef}\r\n          centerAt={([500],[500])}\r\n          />\r\n      \r\n        <Slider\r\n          aria-label=\"Sections\"\r\n          defaultValue={0}\r\n          valueLabelDisplay=\"auto\"\r\n          onChange={(_, value) => {setCounter(value)}}\r\n          step={1}\r\n          marks\r\n          min={0}\r\n          max={data.length - 1}\r\n          />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client'; \r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}